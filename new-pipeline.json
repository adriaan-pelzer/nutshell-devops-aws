{
    "Resources": {
        "AdminUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": "root",
                    "PasswordResetRequired": true
                },
                "Path": "/",
                "Policies": [ 
                    {
                        "PolicyName": "new-pipeline-admin-user",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "AllowAll",
                                    "Action": [
                                        "*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Sid": "EnforceMFADisabledChangeEffectToDenyToEnable",
                                    "Effect": "Allow",
                                    "Action": [
                                        "*"
                                    ],
                                    "Resource": "*",
                                    "Condition": { "BoolIfExists": { "aws:MultiFactorAuthPresent": false } }
                                }
                            ]
                        }
                    }
                ],
                "UserName": "root"
            }
        },
        "CloudformationTemplateBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": "new-pipeline-cloudformation-template-bucket"
            }
        },
        "Repository": {
            "Type": "AWS::CodeCommit::Repository",
            "Properties": {
                "RepositoryDescription": "A repository that triggers a codebuild project that creates a new code pipeline",
                "RepositoryName": "new-pipeline",
                "Triggers": [
                    {
                        "Name": "new-pipeline-trigger",
                        "DestinationArn": { "Fn::GetAtt": [ "LambdaTrigger", "Arn" ] },
                        "Events": [ "all" ]
                    }
                ]
            }
        },
        "LambdaTriggerInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "Principal": "codecommit.amazonaws.com",
                "FunctionName": { "Fn::GetAtt": [ "LambdaTrigger", "Arn" ] }
            }
        },
        "LambdaTriggerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "new-pipeline-lambda-role",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "lambda.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "new-pipeline-lambda-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": { "Fn::Join": [ ":", [
                                        "arn:aws:codebuild",
                                        { "Ref": "AWS::Region" },
                                        { "Ref": "AWS::AccountId" },
                                        "project/new-pipeline-codebuild-project"
                                    ] ] },
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaTrigger": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": { "Fn::Join": [ "\n", [
                        { "Fn::Join": [ "", [
                            "const aws = require ( 'aws-sdk' ), codebuild = new aws.CodeBuild ( { region: '",
                            { "Ref": "AWS::Region" },
                            "' } );"
                        ] ] },
                        "",
                        "exports.handler = async function ( event, context, callback ) {",
                        "    try {",
                        { "Fn::Join": [ ":", [
                            "        const tags = ( event.Records || [] ).filter ( Record => Record.eventSourceARN === 'arn:aws:codecommit",
                            { "Ref": "AWS::Region" },
                            { "Ref": "AWS::AccountId" },
                            "new-pipeline' ).map ("
                        ] ] },
                        "            Record => ( ( Record.codecommit || {} ).references || [] ).filter (",
                        "                reference => reference.ref.match ( '/tags/' )",
                        "            )",
                        "        ).reduce ( ( a, b ) => a.concat ( b ), [] ).map (",
                        "            reference => {",
                        "                const [ Platform, Service, StackType ] = reference.ref.split ( '/' ).pop ().split ( '-' );",
                        "",
                        "                return {",
                        "                    Platform,",
                        "                    Service,",
                        "                    StackType,",
                        "                    CommitId: reference.commit",
                        "                };",
                        "            }",
                        "        );",
                        "",
                        "        for ( const tag of tags ) {",
                        "            await codebuild.startBuild ( {",
                        "                projectName: 'new-pipeline-codebuild-project',",
                        "                environmentVariablesOverride: [",
                        "                    {",
                        "                        name: 'PLATFORM',",
                        "                        value: tag.Platform",
                        "                    },",
                        "                    {",
                        "                        name: 'SERVICE',",
                        "                        value: tag.Service",
                        "                    },",
                        "                    {",
                        "                        name: 'STACK_TYPE',",
                        "                        value: tag.StackType",
                        "                    },",
                        "                    {",
                        "                        name: 'COMMIT_ID',",
                        "                        value: tag.CommitId",
                        "                    }",
                        "                ],",
                        "                sourceVersion: tag.CommitId",
                        "            } ).promise ().then ( console.log );",
                        "        }",
                        "",
                        "        return callback ( null, 'DONE' );",
                        "    } catch ( err ) {",
                        "    return callback ( err.message );",
                        "    }",
                        "};"
                    ] ] }
                },
                "FunctionName": "new-pipeline-lambda",
                "Handler": "index.handler",
                "MemorySize": "128",
                "Timeout": "30",
                "Role": { "Fn::GetAtt": [ "LambdaTriggerRole", "Arn" ] },
                "Runtime": "nodejs8.10"
            }
        },
        "CodeBuildProjectRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "new-pipeline-codebuild-project-role",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "new-pipeline-codebuild-project-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codecommit:GitPull"
                                    ],
                                    "Resource": { "Fn::GetAtt": [ "Repository", "Arn" ] },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject"
                                    ],
                                    "Resource": { "Fn::Join": [ "/", [
                                        { "Fn::GetAtt": [ "CloudformationTemplateBucket", "Arn" ] },
                                        "*"
                                    ] ] },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:CreateBucket",
                                        "s3:DeleteBucket",
                                        "s3:PutObject",
                                        "cloudformation:ValidateTemplate",
                                        "cloudformation:CreateStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "codecommit:ListRepositories",
                                        "codecommit:GetRepository",
                                        "codecommit:CreateRepository",
                                        "codecommit:DeleteRepository",
                                        "codebuild:BatchGetProjects",
                                        "codebuild:CreateProject",
                                        "codebuild:DeleteProject",
                                        "codepipeline:GetPipeline",
                                        "codepipeline:CreatePipeline",
                                        "codepipeline:DeletePipeline",
                                        "codepipeline:GetPipelineState",
                                        "iam:PassRole",
                                        "iam:GetRole",
                                        "iam:CreateRole",
                                        "iam:DeleteRole",
                                        "iam:PutRolePolicy",
                                        "iam:DeleteRolePolicy",
                                        "events:DescribeRule",
                                        "events:PutTargets",
                                        "events:RemoveTargets",
                                        "events:PutRule",
                                        "events:DeleteRule"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CodeBuildProject": {
            "Type": "AWS::CodeBuild::Project",
            "Properties": {
                "Name": "new-pipeline-codebuild-project",
                "Description": "A codeBuild project that creates new code pipelines",
                "Artifacts": {
                    "Type": "NO_ARTIFACTS"
                },
                "BadgeEnabled": true,
                "Environment": {
                    "EnvironmentVariables": [
                        {
                            "Name": "REGION",
                            "Value": { "Ref": "AWS::Region" }
                        },
                        {
                            "Name": "CFN_TEMPLATE_BUCKET",
                            "Value": { "Ref": "CloudformationTemplateBucket" }
                        },
                        {
                            "Name": "CFN_TEMPLATE_BUCKET_DOMAIN_NAME",
                            "Value": { "Fn::GetAtt": [ "CloudformationTemplateBucket", "DomainName" ] }
                        }
                    ],
                    "ComputeType": "BUILD_GENERAL1_SMALL",
                    "Image": "aws/codebuild/nodejs:10.1.0",
                    "Type": "LINUX_CONTAINER",
                    "PrivilegedMode": false
                },
                "ServiceRole": { "Fn::GetAtt": [ "CodeBuildProjectRole", "Arn" ] },
                "Source": {
                    "BuildSpec": { "Fn::Join": [ "\n", [
                        "version: 0.2",
                        "",
                        "phases:",
                        "  build:",
                        "    commands:",
                        "      - /bin/bash build.sh"
                    ] ] },
                    "Type": "CODECOMMIT",
                    "Location": { "Fn::GetAtt": [ "Repository", "CloneUrlHttp" ] }
                }
            }
        }
    }
}
